pragma solidity ^0.5.7;import "./Car.sol";contract User{    address public manager ;    Car  public carInfo; // car Info    struct UserDetail{        string ui_name; // user name        address ui_walletAddr;// user wallet address        uint256[] carId; // car info    }    uint256 public UID;    mapping(bytes32=>uint256) public uerHashToID;    mapping(uint256=>UserDetail) public userInfo;    mapping(address=>uint256) public userAddrToID;    constructor() public {        manager  = msg.sender ;    }    modifier onlyManager(){       require(msg.sender == manager,"onlyManager can do");       _;    }    /**     * @dev register a new user .     * @param _name name of user     * @param walletAddr wallet address for user     * @return userId olny ID for user     */    function registerUser(string memory _name, address walletAddr) public onlyManager returns(uint256 userId){        require(walletAddr != address(0),"walletAddr can not be zero");        bytes32 userHash = keccak256(abi.encodePacked(_name, walletAddr));        userId = uerHashToID[userHash];        if(userId == 0){            //new one            uint256[] memory carID;            UserDetail memory  uDetail = UserDetail(_name,walletAddr,carID);            UID++;            uerHashToID[userHash] = UID;            userInfo[UID] = uDetail;            userAddrToID[walletAddr] = UID;            userId = UID;        }    }}