pragma solidity ^0.5.7;import "./Car.sol";import "./User.sol";contract UserData {    address private owner;    address public manager;    address public carContractAddr;    address public userContractAddr;    mapping(address=>mapping(uint256=>mapping(uint256=>string))) private userCarData; // user=>carid=>time=>dataHash    mapping(address=>mapping(uint256=>mapping(uint256=>mapping(uint256=>string)))) private userNavigationData;// user=>location=>carid=>time=>dataHash    mapping(address=>mapping(uint256=>mapping(uint256=>mapping(uint256=>string)))) private userDriveData;//user=>location=>carid=>time=>dataHash;    mapping(address=>mapping(uint256=>mapping(uint256=>uint256))) private userCarDataPrice; // user=>carid=>time=>dataHash    mapping(address=>mapping(uint256=>mapping(uint256=>mapping(uint256=>uint256)))) private userNavigationDataPrice;// user=>location=>carid=>time=>dataHash    mapping(address=>mapping(uint256=>mapping(uint256=>mapping(uint256=>uint256)))) private userDriveDataPrice;//user=>location=>carid=>time=>dataHash;    constructor() public {        owner = msg.sender;    }    function setManager(address _managerAddr) public {        require(msg.sender == owner,"only owner");        manager = _managerAddr ;    }    modifier onlyManager(){       require(msg.sender == manager,"onlyManager can do");       _;    }    /**     * @dev setContractAddr .     * @param carCAddr car contract address     * @param userCAddr user contract address     */    function setContractAddr(address carCAddr, address userCAddr) public{        uint256 size;        // solium-disable-next-line security/no-inline-assembly        assembly { size := extcodesize(carCAddr) }        require(size > 0 ,"carContractAddr not contract addr");        assembly { size := extcodesize(userCAddr) }        require(size > 0 ,"carContractAddr not contract addr");        carContractAddr = carCAddr;        userContractAddr = userCAddr;    }    /**     * @dev updataCarData  .     * @param _carID car producter     * @param _userAddr car type     * @param _dataTime listing time     * @param _dataHash listing time     * @param _value listing time     */    function updataCarData(uint256 _carID,        address _userAddr ,        uint256 _dataTime,        string memory _dataHash,        uint256 _value)        public        onlyManager    {        require(checkUserAndCar(_carID,_userAddr),"car or user not exit");        uint256[] memory  userCarList = User(userContractAddr).getUserCar(_userAddr);        require(userCarList.length !=0,"user not car now ");        bool isRegistCar = false;        uint256 carIdLength = userCarList.length;        for(uint256 i=0; i<carIdLength; i++){            if(_carID ==userCarList[i] ){                isRegistCar = true;                break;            }        }        require(isRegistCar,"car not bound to car ");        userCarData[_userAddr][_carID][_dataTime] = _dataHash;        userCarDataPrice[_userAddr][_carID][_dataTime] = _value;    }    function updataNavigationData(uint256 _carID,        address _userAddr,        uint256 _dataTime,        string memory _dataHash,        uint256 _value,        uint256 _location)        public        onlyManager    {        require(checkUserAndCar(_carID,_userAddr),"car or user not exit");        userNavigationData[_userAddr][_location][_carID][_dataTime] = _dataHash;        userNavigationDataPrice[_userAddr][_location][_carID][_dataTime] = _value;    }    function checkUserAndCar(uint256 _carID,address _userAddr) internal view returns(bool res){        uint256 userID =User(userContractAddr).isRegisterUser(_userAddr);        if(_carID!=0 && userID !=0){          res = true;        }    }}