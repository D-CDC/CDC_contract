pragma solidity ^0.5.7;import "./Car.sol";import "./User.sol";import "./Buyer.sol";contract UserData {    address private owner;    address public manager;    address payable private  teamAddr;    address public carContractAddr;    address public userContractAddr;    address public buyerContractAddr;    mapping(address=>mapping(uint256=>mapping(uint256=>string))) private userCarData; // user=>carid=>time=>dataHash    mapping(address=>mapping(uint256=>mapping(uint256=>mapping(uint256=>string)))) private userNavigationData;// user=>location=>carid=>time=>dataHash    mapping(address=>mapping(uint256=>mapping(uint256=>mapping(uint256=>string)))) private userDriveData;//user=>location=>carid=>time=>dataHash;    mapping(address=>mapping(uint256=>mapping(uint256=>uint256))) private userCarDataPrice; // user=>carid=>time=>dataHash    mapping(address=>mapping(uint256=>mapping(uint256=>mapping(uint256=>uint256)))) private userNavigationDataPrice;// user=>location=>carid=>time=>dataHash    mapping(address=>mapping(uint256=>mapping(uint256=>mapping(uint256=>uint256)))) private userDriveDataPrice;//user=>location=>carid=>time=>dataHash;    constructor() public {        owner = msg.sender;    }    function setManager(address _managerAddr) public {        require(msg.sender == owner,"only owner");        manager = _managerAddr ;    }    modifier onlyManager(){       require(msg.sender == manager,"onlyManager can do");       _;    }    /**     * @dev setContractAddr .     * @param carCAddr car contract address     * @param userCAddr user contract address     */    function setContractAddr(address carCAddr, address userCAddr,address buyerCAddr) public{        uint256 size;        // solium-disable-next-line security/no-inline-assembly        assembly { size := extcodesize(carCAddr) }        require(size > 0 ,"carContractAddr not contract addr");        assembly { size := extcodesize(userCAddr) }        require(size > 0 ,"userCAddr not contract addr");        assembly { size := extcodesize(buyerCAddr) }        require(size > 0 ,"buyerCAddr not contract addr");        carContractAddr = carCAddr;        userContractAddr = userCAddr;        buyerContractAddr = buyerCAddr;    }    /**     * @dev updataCarData  .     * @param _carID car id     * @param _dataTime time of data     * @param _dataHash data ipfs hash     * @param _value price of Navigation data     */    function updataCarData(uint256 _carID,        uint256 _dataTime,        string memory _dataHash,        uint256 _value)        public    {        require(checkUserAndCar(_carID,msg.sender),"car or user not exit");        uint256[] memory  userCarList = User(userContractAddr).getUserCar(msg.sender);        require(userCarList.length !=0,"user not car now ");        bool isRegistCar = false;        uint256 carIdLength = userCarList.length;        for(uint256 i=0; i<carIdLength; i++){            if(_carID ==userCarList[i] ){                isRegistCar = true;                break;            }        }        require(isRegistCar,"car not bound to car ");        userCarData[msg.sender][_carID][_dataTime] = _dataHash;        userCarDataPrice[msg.sender][_carID][_dataTime] = _value;    }    /**     * @dev updataNavigationData  .     * @param _carID car id     * @param _dataTime time of data     * @param _dataHash data ipfs hash     * @param _value price of Navigation data     * @param _location location info     */    function updataNavigationData(uint256 _carID,        uint256 _dataTime,        string memory _dataHash,        uint256 _value,        uint256 _location)        public    {        require(checkUserAndCar(_carID,msg.sender),"car or user not exit");        userNavigationData[msg.sender][_location][_carID][_dataTime] = _dataHash;        userNavigationDataPrice[msg.sender][_location][_carID][_dataTime] = _value;    }    /**     * @dev updataDriveData  .     * @param _carID car id     * @param _dataTime time of data     * @param _dataHash data ipfs hash     * @param _value price of Navigation data     * @param _location location info     */    function updataDriveData(uint256 _carID,        uint256 _dataTime,        string memory _dataHash,        uint256 _value,        uint256 _location)        public    {        require(checkUserAndCar(_carID,msg.sender),"car or user not exit");        userDriveData[msg.sender][_location][_carID][_dataTime] = _dataHash;        userDriveDataPrice[msg.sender][_location][_carID][_dataTime] = _value;    }    function buyUserCarData(address payable _userAddr,uint256 _carID,uint256 _dataTime) payable public returns(string memory carHash){        require(checkUserAndCar(_carID,msg.sender),"car or user not exit");        require(checkBuyer(msg.sender),"buyer muster register");        uint256 price = userCarDataPrice[_userAddr][_carID][_dataTime];        uint256 totalPay = price + (price)/100;        require(msg.value == totalPay,"total pay not enght");        carHash = userCarData[_userAddr][_carID][_dataTime];        _userAddr.transfer(price);        teamAddr.transfer((price)/100);    }    function checkUserAndCar(uint256 _carID,address _userAddr) internal view returns(bool res){        uint256 userID =User(userContractAddr).isRegisterUser(_userAddr);        if(_carID!=0 && userID !=0){          res = true;        }    }    function checkBuyer(address buyerAddr) internal view returns(bool res){        uint256 buyerID =Buyer(buyerContractAddr).isRegisterBuyer(buyerAddr);        if(buyerID !=0){          res = true;        }    }}